(dp0
S'imports'
p1
c__builtin__
set
p2
((lp3
tp4
Rp5
sS'code'
p6
S'def ChoosePivot(list):\n    return list[0]\n\ndef Partition(A,left,right):\n    p = ChoosePivot(A)\n    i = left + 1\n\n    for j in range(left + 1,right + 1): #upto right + 1 because of range()\n        if A[j] < p:\n                A[j], A[i] = A[i], A[j] #swap\n                i = i + 1\n    A[left], A[i - 1] = A[i-1], A[left] #swap\n    return i - 1\n\ndef QuickSort(list,left, right):\n    if len(list) == 1: return\n    if left < right:\n        pivot = Partition(list,left,right)\n        QuickSort(list,left, pivot - 1)\n        QuickSort(list,pivot + 1, right)\n        return list[:pivot] + [list[pivot]] + list[pivot+1:]\n'
p7
sS'methods'
p8
(lp9
S'ChoosePivot'
p10
aS'range'
p11
aS'len'
p12
aS'Partition'
p13
aS'QuickSort'
p14
ag14
as.