(dp0
S'imports'
p1
c__builtin__
set
p2
((lp3
S'numpy'
p4
aS'hmm.HMM'
p5
atp6
Rp7
sS'code'
p8
S'from hmm import HMM\nimport numpy as np\n\n#the Viterbi algorithm\ndef viterbi(hmm, initial_dist, emissions):\n    probs = hmm.emission_dist(emissions[0]) * initial_dist\n    stack = []\n\n    for emission in emissions[1:]:\n        trans_probs = hmm.transition_probs * np.row_stack(probs)\n        max_col_ixs = np.argmax(trans_probs, axis=0)\n        probs = hmm.emission_dist(emission) * trans_probs[max_col_ixs, np.arange(hmm.num_states)]\n\n        stack.append(max_col_ixs)\n\n    state_seq = [np.argmax(probs)]\n\t\t\n\t\t\nwiki_transition_probs = np.array([[0.7, 0.4], [0.3, 0.6]]) #0=Healthy, 1=Fever\nwiki_emissions = [2, 1, 0]\nwiki_emission_probs = np.array([[0.1, 0.4, 0.5], [0.6, 0.3, 0.1]]) #0=Dizzy, 1=Cold, 2=Normal\nwiki_initial_dist = np.array([[0.6, 0.4]])\nwiki_hmm = HMM(wiki_transition_probs, wiki_emission_probs)'
p9
sS'methods'
p10
(lp11
S'np.array'
p12
aS'np.array'
p13
aS'np.array'
p14
aS'HMM'
p15
aS'hmm.emission_dist'
p16
aS'np.argmax'
p17
aS'stack.append'
p18
aS'np.argmax'
p19
aS'np.row_stack'
p20
aS'hmm.emission_dist'
p21
aS'np.arange'
p22
as.