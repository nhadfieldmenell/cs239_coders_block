def create_score_matrix(rows, cols):
  '''Create a matrix of scores representing trial alignments of the two sequences.

    Sequence alignment can be treated as a graph search problem. This function
    creates a graph (2D matrix) of scores, which are based on trial alignments
    of different base pairs. The path with the highest cummulative score is the
    best alignment.
  '''
  score_matrix = [[0 for col in range(cols)] for row in range(rows)]

  # Fill the scoring matrix.
  max_score = 0
  max_pos   = None    # The row and columbn of the highest score in matrix.
  for i in range(1, rows):
    for j in range(1, cols):
      score = calc_score(score_matrix, i, j)
        if score > max_score:
          max_score = score
          max_pos   = (i, j)

        score_matrix[i][j] = score

  assert max_pos is not None, 'the x, y position with the highest score was not found'

  return score_matrix, max_pos


def calc_score(matrix, x, y):
  '''Calculate score for a given x, y position in the scoring matrix.

    The score is based on the up, left, and upper-left neighbors.
  '''
  similarity = match if seq1[x - 1] == seq2[y - 1] else mismatch

  diag_score = matrix[x - 1][y - 1] + similarity
  up_score   = matrix[x - 1][y] + gap
  left_score = matrix[x][y - 1] + gap

  return max(0, diag_score, up_score, left_score)


def traceback(score_matrix, start_pos):
  '''Find the optimal path through the matrix.

    This function traces a path from the bottom-right to the top-left corner of
    the scoring matrix. Each move corresponds to a match, mismatch, or gap in one
    or both of the sequences being aligned. Moves are determined by the score of
    three adjacent squares: the upper square, the left square, and the diagonal
    upper-left square.

    WHAT EACH MOVE REPRESENTS
      diagonal: match/mismatch
      up:       gap in sequence 1
      left:     gap in sequence 2
  '''

  END, DIAG, UP, LEFT = range(4)
  aligned_seq1 = []
  aligned_seq2 = []
  x, y         = start_pos
  move         = next_move(score_matrix, x, y)
  while move != END:
    if move == DIAG:
      aligned_seq1.append(seq1[x - 1])
      aligned_seq2.append(seq2[y - 1])
      x -= 1
      y -= 1
    elif move == UP:
      aligned_seq1.append(seq1[x - 1])
      aligned_seq2.append('-')
      x -= 1
    else:
      aligned_seq1.append('-')
      aligned_seq2.append(seq2[y - 1])
      y -= 1

    move = next_move(score_matrix, x, y)


